name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  NPM_VERSION: '8'

jobs:
  # Quality Checks Job
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Validate environment
        run: npm run validate:env

      - name: Run linting
        run: npm run lint

      - name: Check code formatting
        run: npm run format:check

      - name: Run TypeScript compilation check
        run: npm run build

  # Testing Job
  testing:
    name: Testing & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Jest tests with coverage
        run: npm run test:coverage
        env:
          CI: true

      - name: Run Vitest tests with coverage
        run: npm run test:vitest:coverage
        env:
          CI: true

      - name: Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          # Jest coverage is already enforced by jest.config.js
          # Vitest coverage is already enforced by vitest.config.ts
          echo "✅ Coverage thresholds met (80% minimum)"

      - name: Upload Jest coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: jest
          name: jest-coverage
          fail_ci_if_error: false

      - name: Upload Vitest coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: vitest
          name: vitest-coverage
          fail_ci_if_error: false

  # Security Scanning Job
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Dependency Updates Job
  dependency-updates:
    name: Dependency Updates
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check for outdated dependencies
        run: npm outdated || true

      - name: Create Dependabot PR
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: 'chore: update dependencies'
          body: |
            Automated dependency updates

            This PR was created automatically to update outdated dependencies.
            Please review the changes and merge if tests pass.
          branch: dependabot/update-dependencies
          delete-branch: true

  # Build and Package Job
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [quality-checks, testing, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 30

  # Docker Build Job
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality-checks, testing, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -f Dockerfile.dev -t app:latest .

      - name: Run Docker container tests
        run: |
          docker run --rm app:latest npm run test
          docker run --rm app:latest npm run test:vitest

  # Quality Gates Summary
  quality-gates:
    name: Quality Gates Summary
    runs-on: ubuntu-latest
    needs: [quality-checks, testing, security]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Quality Gates Report
        run: |
          echo "## 🎯 Quality Gates Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Quality Checks Status
          if [ "${{ needs.quality-checks.result }}" == "success" ]; then
            echo "✅ **Code Quality**: All checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Code Quality**: Checks failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Testing Status
          if [ "${{ needs.testing.result }}" == "success" ]; then
            echo "✅ **Testing**: All tests passed with coverage" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Testing**: Tests failed" >> $GITHUB_STEP_SUMMARY
          fi

          # Security Status
          if [ "${{ needs.security.result }}" == "success" ]; then
            echo "✅ **Security**: No high-severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security**: Security issues detected" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Coverage Requirements" >> $GITHUB_STEP_SUMMARY
          echo "- **Minimum Coverage**: 80%" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting**: ESLint + Prettier" >> $GITHUB_STEP_SUMMARY
          echo "- **Type Checking**: TypeScript strict mode" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: npm audit + Snyk scanning" >> $GITHUB_STEP_SUMMARY
